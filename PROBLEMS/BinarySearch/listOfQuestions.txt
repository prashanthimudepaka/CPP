1)
You are given a sorted array arr of distinct values and a target value x. 
You need to search for the index of the target value in the array.

If the value is present in the array, then return its index. Otherwise, 
determine the index where it would be inserted in the array while maintaining the 
sorted order.

2)You're given an sorted array arr of n integers and an integer x.
 Find the floor and ceiling of x in arr[0..n-1].
The floor of x is the largest element in the array which is smaller than or equal to x.
The ceiling of x is the smallest element in the array greater than or equal to x.
4,7,8,10


3) Given a sorted array of N integers, write a program to find the index 
of the last occurrence of the target key. If the target is not found then return -1.

4)You are given a sorted array containing N integers and a number X, 
you have to find the occurrences of X in the given array.
ex:
inp: 0 0 1 2 3 4 
x=0 
0 1

5) Given an integer array arr of size N, sorted in
 ascending order (with distinct values) and a target value k. Now the array is rotated at 
some pivot point unknown to you. Find the index at which k is present and if k is not present return -1.

inp: 10 20 30 40 0 3 5 7 9
     0  1   2  3  4  5  6 7
     10 1 2 3 4 5 6 7 8 9
     0  1 2 3 4 5 6 7 8 9

6) Given an integer array arr of size N, sorted in ascending order (with distinct
 values).
 Now the array is rotated between 
1 to N times which is unknown. Find the minimum element in the array.
10 20 30 40 50 60


7) Given an integer array arr of size N, sorted in ascending order 
(with distinct values).
 Now the array is rotated between 1 to N times
  which is unknown. Find how many times the array has been rotated.
        Example 1:
Input Format:
 arr = [4,5,6,7,0,1,2,3]
Result:
 4
Explanation:
 The original array should be [0,1,2,3,4,5,6,7]. So, we can 
 notice that the array has been rotated 4 times.

[4,5,6,7,0,1,2,3]

[5,6,7,0,1,2,3,4]
[6,7,0,1,2,3,4,5]
[7,0,1,2,3,4,5,6]
[0,1,2,3,4,5,6,7]

 Example 2:
Input Format:
 arr = [3,4,5,1,2]
Result:
 3
Explanation:
 The original array should be [1,2,3,4,5]. So, we 
 can notice that the array has been rotated 3 times.


8) Given an array of N integers. Every number in the array except one appears twice. 
Find the single number in the array.
 Example 1:
Input Format:
 ___________
 arr[] = {1,1,2,2,3,3,4,5,5,6,6}
Result:
 4
Explanation:
 Only the number 4 appears once in the array.

Example 2:
Input Format:
 arr[] = {1,1,3,5,5}
Result:
 3
Explanation:
 Only the number 3 appears once in the array.




9) Given an array of length N. Peak element is defined as the element greater than both of its neighbors. Formally, 
if 'arr[i]' is the peak element, 'arr[i - 1]' < 'arr[i]' and 'arr[i + 1]' < 'arr[i]'.
 Find the index(0-based) of a peak element in the array. If there are multiple peak numbers, 
return the index of any peak number
Example 1:
Input Format: arr[] = {1,2,3,4,5,6,7,8,5,1}
Result: 7
Explanation: In this example, there is only 1 peak that is at index 7.

Example 2:
Input Format: arr[] = {1,2,1,3,5,6,4}
Result: 1
Explanation: In this example, there are 2 peak numbers that are at indices 1 and 5. We can consider any of them.

Example 3:
Input Format: arr[] = {1, 2, 3, 4, 5}
Result: 4
Explanation: In this example, there is only 1 peak that is at the index 4.

Example 4:
Input Format: arr[] = {5, 4, 3, 2, 1}
Result: 0
Explanation: In this example, there is only 1 peak that is at the index 0.

10) You are given a positive integer n. Your task is to find and return its square root. If ‘n’ is not
a perfect square, then return the floor value of 'sqrt(n)'.

Note: The question explicitly states that if the given number, n, is not a perfect square, 
our objective is to find the maximum number, x, such that x squared is less than or equal to n (x*x <= n).
 In other words, we need to determine the floor value of the square root of n.


Example 1:
Input Format:
 n = 36
Result:
 6
Explanation:
 6 is the square root of 36.

Example 2:
Input Format:
 n = 28
Result:
 5
Explanation:
 Square root of 28 is approximately 5.292. So, the floor value will be 5.


11) A monkey is given ‘n’ piles of bananas, whereas the 'ith' pile has ‘a[i]’ bananas. An integer ‘h’ is 
also given, 
which denotes the time (in hours) for all the bananas to be eaten.

Each hour, the monkey chooses a non-empty pile of bananas and eats ‘k’ bananas. If the pile 
contains less than ‘k’ bananas, then the monkey consumes all the bananas and won’t eat any more bananas
 in that hour.w
Find the minimum number of bananas ‘k’ to eat per hour so that the monkey can eat all the bananas within ‘h’ hours.
Example 1:
Input Format:
 N = 4, a[] = {7, 15, 6, 3}, h = 8
Result:
 5
Explanation:
 If Koko eats 5 bananas/hr, he will take 2, 3, 2, and 1 hour to eat the piles accordingly. So,
  he will take 8 hours to complete all the piles.  

Example 2:
Input Format:
 N = 5, a[] = {25, 12, 8, 14, 19}, h = 5
Result:
 25
Explanation:
 If Koko eats 25 bananas/hr, he will take 1, 1, 1, 1, and 1 hour to eat the piles accordingly.
  So, he will take 5 hours to complete all the piles

12)You are given 'N’ roses and you are also given an array 'arr'  where 'arr[i]'  
denotes that the 'ith' rose will bloom on the 'arr[i]th' day.
You can only pick already bloomed roses that are adjacent to make a bouquet. 
You are also told that you require exactly 'k' adjacent bloomed roses to make a single bouquet.
Find the minimum number of days required to make at least ‘m' bouquets each containing 'k'
 roses. Return -1 if it is not possible.

 Example 1:
Input Format:
 N = 8, arr[] = {7, 7, 7, 7, 13, 11, 12, 7}, m = 2, k = 3
Result:
 12
Explanation:
 On the 12th the first 4 flowers and the last 3 flowers would have already bloomed. So, 
 we can easily make 2 bouquets, 
 one with the first 3 and another with the last 3 flowers.

Example 2:
Input Format:
 N = 5, arr[] = {1, 10, 3, 10, 2}, m = 3, k = 2
Result:
 -1
Explanation:
 If we want to make 3 bouquets of 2 flowers each, we need at least 6 flowers. But we are given only 5 
 flowers, so, we cannot make the bouquets.


13) You are given an array of integers 'arr' and an integer i.e. a threshold value 'limit'. 
Your task is to find the smallest positive integer divisor, such that upon dividing all the elements of the 
given array by it, the sum of the division's result is less than or equal to the given threshold value.
Example 1:
Input Format:
 N = 5, arr[] = {1,2,3,4,5}, limit = 8
Result:
 3
Explanation:
 We can get a sum of 15(1 + 2 + 3 + 4 + 5) if we choose 1 as a divisor. 
The sum is 9(1 + 1 + 2 + 2 + 3)  if we choose 2 as a divisor. Upon 
dividing all the elements of the array by 3, we get 1,1,1,2,2 respectively. 
Now, their sum is equal to 7 <= 8 i.e. the threshold value. So, 3 is the minimum possible answer.

Example 2:
Input Format:
 N = 4, arr[] = {8,4,2,3}, limit = 10
Result:
 2
Explanation:
 If we choose 1, we get 17 as the sum. If we choose 2, we get 9(4+2+1+2) <= 10 as the answer. So, 2 is the answer.

14) You are the owner of a Shipment company. You use conveyor belts to ship
 packages from one port to another. The packages must be shipped within 'd' days.
The weights of the packages are given in an array 'of weights'. The packages are 
loaded on the conveyor belts every day in the same order as they appear in the array.
 The loaded weights must not exceed the maximum weight capacity of the ship.
Find out the least-weight capacity so that you can ship all the packages within 'd' days.
Example 1:
Input Format:
 N = 5, weights[] = {5,4,5,2,3,4,5,6}, d = 5
Result:
 9
Explanation:
 If the ship capacity is 9, the shipment will be done in the following manner:
Day         Weights            Total
1        -       5, 4          -        9
2        -       5, 2          -        7
3        -       3, 4          -        7
4        -       5              -        5
5        -       6              -        6
So, the least capacity should be 9.

Example 2:
Input Format:
 N = 10, weights[] = {1,2,3,4,5,6,7,8,9,10}, d = 1
Result:
 55
Explanation:
 We have to ship all the goods in a single day. So, the weight capacity should be the summation of all the weights i.e. 55.


15)You are given a strictly increasing array ‘vec’ 
and a positive integer 'k'. Find the 'kth' positive integer missing from 'vec'.
Example 1:
Input Format:
 vec[]={4,7,9,10}, k = 1
Result:
 1
Explanation:
 The missing numbers are 1, 2, 3, 5, 6, 8, 11, 12, ……, and so on. Since 'k' 
 is 1, the first missing element is 1.
Example 2:
Input Format:
 vec[]={4,7,9,10}, k = 4
Result:
 5
Explanation:
 The missing numbers are 1, 2, 3, 5, 6, 8, 11, 12, ……, and so on. Since 'k' is 4, the fourth missing element is 5.

imp 
16)You are given an array 'arr' of size 'n' which denotes the position of stalls.
You are also given an integer 'k' which denotes the number of aggressive cows.
You are given the task of assigning stalls to 'k' cows such that the minimum distance 
between any two of them is the maximum possible.
Find the maximum possible minimum distance.
Example 1:
Input Format:
 N = 6, k = 4, arr[] = {0,3,4,7,10,9}
Result:
 3
Explanation:
 The maximum possible minimum distance between any two cows will be 3 when 4 cows are
  placed at positions {0, 3, 7, 10}. Here the distances between cows are 3, 4, and 3
   respectively. We cannot make the minimum distance greater than 3 in any ways.
Example 2:
Input Format:
 N = 5, k = 2, arr[] = {4,2,1,3,6}
Result:
 5
Explanation:
 The maximum possible minimum distance between any two cows will be 5 when 2 cows are placed at positions {1, 6}.
/*
0 3 4 7 10 9
0 3 4 7 9 10
max possible minimum distance bw tw0

0 3 7 10   k=4
 3 4 3     min=3
0 3 4 7
 3 1 3     min=1

0 4 9 10
 4 5 1    min=1
         max(min)

h=max(v)-min(v);

4 7 10 9
1 2 3 4
 3 3  1
  2
min=1
0  3  4  7  9  10
c1 c2 c3 c4

0  3  4  7  9  10
c1 c2    c3 c4

0  3  4  7  9  10
c1 c2    c3    c4

0  3   4   7  9  10
c1     c2        c3     


*/

 17)
 Given an array ‘arr of integer numbers, ‘ar[i]’ represents the number of pages in the ‘i-th’ book. 
 There are a ‘m’ number of students, 
 and the task is to allocate all the books to the students.
Allocate books in such a way that:

Each student gets at least one book.
Each book should be allocated to only one student.
Book allocation should be in a contiguous manner.
You have to allocate the book to ‘m’ students such that the maximum number of pages assigned
 to a student is minimum. If the allocation of books is not possible. return -1

 Example 1:
Input Format:
 n = 4, m = 2, arr[] = {12, 34, 67, 90}
                       
Result:
 113
Explanation:
 The allocation of books will be 12, 34, 67 | 90. One student will get the first 3 books and the other will get the last one.

Example 2:
Input Format:
 n = 5, m = 4, arr[] = {25, 46, 28, 49, 24}
Result:
 71
Explanation: The allocation of books will be 25, 46 | 28 | 49 | 24.

18) Given an integer array ‘A’ of size ‘N’ and an integer ‘K'. Split the array ‘A’ into ‘K’ 
non-empty subarrays such that the largest sum of any subarray is minimized. Your task is to return the 
minimized largest sum of the split.
A subarray is a contiguous part of the array.
Example 1:
Input Format:
 N = 5, a[] = {1,2,3,4,5}, k = 3
Result:
 6

Explanation:
 There are many ways to split the array a[] into k consecutive subarrays. 
 The best way to do this is to split the array a[] into [1, 2, 3], [4], and [5], where the largest sum 
 among the three subarrays is only 6.

Example 2:
Input Format:
 N = 3, a[] = {3,5,1}, k = 3
Result:
 5
Explanation:
 There is only one way to split the array a[] into 3 subarrays, i.e., [3], [5], and [1].
  The largest sum among these subarrays is 5.

19) Given an array/list of length ‘N’, where the array/list represents the boards
   and each element of the given array/list represents the length of each board. Some ‘K’ numbers
    of painters are available to paint these boards. Consider that each unit of a board takes 1 unit 
    of time to paint. You are supposed to return the area of the minimum time to get this job done of
     painting all the ‘N’ boards under the
   constraint that any painter will only paint the continuous sections of boards.

   Example 1:
Input Format:
 N = 4, boards[] = {5, 5, 5, 5}, k = 2
Result:
 10
Explanation:
 We can divide the boards into 2 equal-sized partitions, so each painter 
 gets 10 units of the board and the total time taken is 10.

Example 2:
Input Format:
 N = 4, boards[] = {10, 20, 30, 40}, k = 2
Result:
 60
Explanation:
 We can divide the first 3 boards for one painter and the last board for the second painter.