1) basic single linked list syntax 
2) length of linked list
3) inserting an element at begin
4) insert at the end
5) delete an element at begin
6) delete an element at end
7) double linked list
8) Search for an element
9) dll similar operations
10)reverse sll

1)Given the head of a linked list of integers, determine the middle node of 
the linked list. However, if the linked list has an even number of nodes, return the second middle node
ex1: 1 2 3 4 5 6 7
           s 
                 f 

2)Given the head of a linked list, determine
 the length of a loop present in the linked list; if not present, return 0


3)Given head, the head of a linked list, determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is some node in the list that can be
 reached again by continuously following the next pointer. Internally, pos is used to 
 denote the index of the node that tail's next pointer is connected to. Note that pos 
 is not passed as a parameter.
Return true if there is a cycle in the linked list. Otherwise, return false.
 https://leetcode.com/problems/linked-list-cycle/description/

4)Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.

There is a cycle in a linked list if there is some node in the list that can be
 reached again by continuously following the next pointer. Internally, pos is used 
 to denote the index of the node that tail's next pointer is connected to (0-indexed).
  It is -1 if there is no cycle. Note that pos is not passed as a parameter.
Do not modify the linked list.
https://leetcode.com/problems/linked-list-cycle-ii/description/

5) reverse a sll
                 