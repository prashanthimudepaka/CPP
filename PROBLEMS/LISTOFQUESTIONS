
PATTERNS:
1.
****
****
****
****
2.
*
**
***
****
3.

1
12
123
1234
12345

4.

1
22
333
4444

5.
****
***
**
*

6.
12345
1234
123
12
1

1. **Find the Largest Element**: Given an array `arr`, the task is to find the largest element in it.

2. **Remove Duplicates from Sorted Array**: Given an integer array sorted in non-decreasing order, remove the duplicates in place such that each unique element appears only once. The relative order of the elements should be kept the same. If there are `k` elements after removing the duplicates, then the first `k` elements of the array should hold the final result. It does not matter what you leave beyond the first `k` elements.

3. **Left Rotate the Array by One Place**: Given an array of `N` integers, left rotate the array by one place.

4. **Find the Missing Number**: Given an integer `N` and an array of size `N-1` containing `N-1` numbers between `1` to `N`, find the number (between `1` to `N) that is not present in the given array.

5. **Find the Union of Two Sorted Arrays**: Given two sorted arrays, `arr1` and `arr2` of size `n` and `m`, find the union of two sorted arrays. The union of two arrays can be defined as the common and distinct elements in the two arrays. **Note**: Elements in the union should be in ascending order.

6. **Maximum Consecutive Ones**: Given an array that contains only `1` and `0`, return the count of maximum consecutive ones in the array.

7. **Find the Single Number**: Given a non-empty array of integers `arr`, every element appears twice except for one. Find that single one.

8. **Sort an Array of 0s, 1s, and 2s**: Given an array consisting of only `0`s, `1`s, and `2`s, write a program to in-place sort the array without using inbuilt sort functions. (Expected: Single pass `O(N)` and constant space).

9. **sorted or not**: Given an array of size n, write a program to check if the 
given array is sorted in (ascending / Increasing / Non-decreasing) 
order or not. 

10. Given an array of N integers, write a program to return an element that occurs more than N/2 times in the given array. You may consider that such an element always exists in the array.
input: n=7 ar=[2 2 1 1 2 2 1]
 
 11.Given an integer array arr, find the contiguous subarray (containing at least one number) which
has the largest sum and returns its sum and prints the subarray.
input: ar=[1,2,3] 
sub:
[[1],[1,2],[1,2,3],[2],[2,3],[3]]
vector<vector<int>> v={{},{}};
for(int i=0;i<n;i++)
{
      for(int j=i;j<n;j++)
      {
        for(int k=i;k<=j;k++)
        {
        }
         
      }
}
/*1 2 3

i=0
j=0 ->2
k= i->j
[1]
j=1
k=0-1
1 2

*/
12.  You are given an array of prices where prices[i] is the price of a given stock on an ith day.
     You want to maximize your profit by choosing a single day to buy one stock and choosing a different
      day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. 
      If you cannot achieve any profit, return 0.
       prices=[7,1,4,3,2,6]--> 6-1=5
               0 1 2 3 4 5
               maxi=0
               for(i=0;i<n;i++)
               for(j=i+1;j<n;j++)
                  if (ar[i]<ar[j])
                  p=ar[j]-ar[i]
                  maxi=max(maxi,p)
13. There’s an array ‘A’ of size ‘N’ with an equal number of positive and
 negative elements. Without altering the relative order of positive and negative elements, 
 you must return an array of alternately positive and negative values.


Note: Start the array with positive elements.

14.Given an array Arr[] of integers, rearrange the numbers of the given array into the 
lexicographically next greater permutation of numbers.
If such an arrangement is not possible, it must rearrange to the
 lowest possible order (i.e., sorted in ascending order).
 v=[10,20,30]
 10 20 30
 10 30 20
 20 10 30
 20 30 10
 30 10 20
 30 20 10

15. Given an array of integers and an integer k, return the total number of subarrays whose sum equals k.
A subarray is a contiguous non-empty sequence of elements within an array.

16. Given an array of N integers. Find the elements that appear more 
than N/3 times in the array. If no such element exists, return an empty vector.

 17. Given an array of N integers, your task is to find unique triplets that add up to give a sum of zero. In short, you need to return an array of all the unique
  triplets [arr[a], arr[b], arr[c]] such that i!=j, j!=k, k!=i, and their sum is equal to zero.
  
18.
 


